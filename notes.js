// ===============================
// üìù notes.js - popup ghi ch√∫ (ƒê∆∞·ªùng / ƒê√°) - BlackTea v2.3
// ===============================

function toggleNotePopup(item, btn) {
  // üß† X√°c ƒë·ªãnh ngu·ªìn d·ªØ li·ªáu (currentTable ho·∫∑c hoaDonTam)
  let cartRef = null;

  if (typeof currentTable !== "undefined" && currentTable && currentTable.cart) {
    cartRef = currentTable.cart;
  } else if (typeof hoaDonTam !== "undefined") {
    cartRef = hoaDonTam;
  } else {
    alert("‚ö†Ô∏è Ch∆∞a c√≥ ƒë∆°n ho·∫∑c b√†n n√†o ƒë∆∞·ª£c ch·ªçn!");
    return;
  }

  // N·∫øu ƒë√£ c√≥ popup c≈© th√¨ remove
  const existing = document.querySelector('.popup-note');
  if (existing) existing.remove();

  // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
  if (item.sugarLevel === undefined) item.sugarLevel = 2;
  if (item.iceLevel === undefined) item.iceLevel = 3;

  // Giao di·ªán popup
  const popup = document.createElement('div');
  popup.className = 'popup-note';
  popup.innerHTML = `
    <div class="popup-row">
      <label>ƒê∆∞·ªùng:</label>
      <input type="range" min="0" max="4" step="1" value="${item.sugarLevel}" class="slider" data-type="sugar">
      <span class="slider-label">${getSugarLabels()[item.sugarLevel]}</span>
    </div>
    <div class="popup-row">
      <label>ƒê√°:</label>
      <input type="range" min="0" max="3" step="1" value="${item.iceLevel}" class="slider" data-type="ice">
      <span class="slider-label">${getIceLabels()[item.iceLevel]}</span>
    </div>
    <div class="popup-actions">
      <button class="cancel">‚úñ</button>
      <button class="confirm">‚úî</button>
    </div>
  `;
  document.body.appendChild(popup);

  positionPopupNearButton(popup, btn);

  // -----------------
  // üéö X·ª≠ l√Ω slider
  popup.querySelectorAll('.slider').forEach(slider => {
    slider.addEventListener('input', e => {
      const lvl = parseInt(e.target.value);
      const type = e.target.dataset.type;
      const label = e.target.closest('.popup-row').querySelector('.slider-label');

      if (type === 'sugar') {
        item.sugarLevel = lvl;
        label.textContent = getSugarLabels()[lvl];
      } else if (type === 'ice') {
        item.iceLevel = lvl;
        label.textContent = getIceLabels()[lvl];
      }
    });
  });

  // -----------------
  // X·ª≠ l√Ω n√∫t b·∫•m
  popup.addEventListener('click', async (ev) => {
    ev.stopPropagation();

    // ‚ùå H·ªßy
    if (ev.target.classList.contains('cancel')) {
      popup.remove();
      return;
    }

    // ‚úÖ X√°c nh·∫≠n
    if (ev.target.classList.contains('confirm')) {
      const isNormalSugar = Number(item.sugarLevel) === 2;
      const isNormalIce = Number(item.iceLevel) === 3;

      // N·∫øu b√¨nh th∆∞·ªùng -> b·ªè sao, kh√¥ng ghi ch√∫
      if (isNormalSugar && isNormalIce) {
        btn.innerText = '‚òÜ';
        btn.classList.remove('active');
        popup.remove();
        return;
      }

      // -----------------
      // Clone m√≥n ghi ch√∫ (ƒê∆°n ·∫£o)
      const baseQty = cartRef.find(it => it.id === item.id)?.soluong || 0;
      const noteCount = cartRef.filter(it => it.id === item.id && it.isNoteOnly).length;

      if (noteCount >= baseQty) {
        alert(`ƒê√£ ghi ch√∫ ƒë·ªß ${baseQty} ly cho m√≥n "${item.name}"`);
        return;
      }

      const newItem = JSON.parse(JSON.stringify(item));
      newItem.isNoteOnly = true;
      newItem.note = `ƒê∆∞·ªùng: ${getSugarLabels()[item.sugarLevel]}, ƒê√°: ${getIceLabels()[item.iceLevel]}`;
      newItem.name = `${item.name} (${getSugarLabels()[item.sugarLevel]}, ${getIceLabels()[item.iceLevel]})`;
      newItem.soluong = 1;
      newItem.price = item.price; // gi·ªØ gi√° g·ªëc

      cartRef.push(newItem);

      // ‚≠ê C·∫≠p nh·∫≠t sao
      btn.innerText = '‚òÖ';
      btn.classList.add('active');

      // -----------------
      // C·∫≠p nh·∫≠t UI v√† d·ªØ li·ªáu
      try {
        if (typeof capNhatHoaDon === "function") capNhatHoaDon();
        if (typeof saveAll === "function") await saveAll();
        if (typeof renderTables === "function") renderTables();
      } catch (err) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ghi ch√∫:", err);
      }

      popup.remove();
    }
  });

  // T·ª± ƒë√≥ng khi click ra ngo√†i
  setTimeout(() => {
    document.addEventListener(
      "click",
      function onDocClick(ev) {
        if (!popup.contains(ev.target)) popup.remove();
      },
      { once: true }
    );
  }, 100);
}

// ----------------------
// Helpers
// ----------------------
function getSugarLabels() {
  return ['Kh√¥ng', '√çt', 'B√¨nh th∆∞·ªùng', 'Th√™m √≠t', 'Th√™m nhi·ªÅu'];
}
function getIceLabels() {
  return ['Kh√¥ng ƒë√°', 'ƒê√° √≠t', 'ƒê√° v·ª´a', 'B√¨nh th∆∞·ªùng'];
}
function positionPopupNearButton(popup, btn) {
  const rect = btn.getBoundingClientRect();
  const popupRect = popup.getBoundingClientRect();
  const scrollTop = window.scrollY || document.documentElement.scrollTop;
  const screenHeight = window.innerHeight;

  let top = rect.bottom + scrollTop + 5;
  if (rect.bottom + popupRect.height > screenHeight - 10)
    top = rect.top + scrollTop - popupRect.height - 5;

  let left = rect.left + rect.width / 2;
  const screenWidth = window.innerWidth;
  if (left - popupRect.width / 2 < 5) left = popupRect.width / 2 + 5;
  if (left + popupRect.width / 2 > screenWidth - 5)
    left = screenWidth - popupRect.width / 2 - 5;

  popup.style.position = "absolute";
  popup.style.top = `${top}px`;
  popup.style.left = `${left}px`;
  popup.style.transform = "translateX(-50%)";
  popup.style.zIndex = 1000;
}
