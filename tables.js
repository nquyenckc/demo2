// ================================
// üìã BlackTea POS v2.3 - tables.js
// Qu·∫£n l√Ω b√†n & ƒë∆°n h√†ng hi·ªán t·∫°i
// ================================

// Firestore (v8)
let db = null;
if (typeof firebase !== "undefined" && firebase.firestore) {
  db = firebase.firestore();
}


// Danh s√°ch t·∫•t c·∫£ b√†n / ƒë∆°n
let TABLES = [];

// B√†n ho·∫∑c ƒë∆°n hi·ªán t·∫°i ƒëang thao t√°c
let currentTable = null;

// ================================
// üîπ LOAD & SAVE d·ªØ li·ªáu
// ================================

// T·∫£i d·ªØ li·ªáu t·ª´ Firestore ho·∫∑c local
async function loadTables() {
  const local = localStorage.getItem("BT_TABLES");
  if (local) TABLES = JSON.parse(local);

  try {
    const snapshot = await db.collection("TABLES").get();
    TABLES = snapshot.docs.map((d) => d.data());
    saveAll(); // l∆∞u l·∫°i local backup
  } catch (err) {
    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i Firestore, d√πng d·ªØ li·ªáu local.");
  }
}

// L∆∞u to√†n b·ªô TABLES v·ªÅ Firestore + local
async function saveAll() {
  localStorage.setItem("BT_TABLES", JSON.stringify(TABLES));
  try {
    const batch = db.batch();
    TABLES.forEach((t) => {
      const ref = db.collection("TABLES").doc(String(t.id));
      batch.set(ref, t);
    });
    await batch.commit();
  } catch (err) {
    console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u Firestore, gi·ªØ localStorage.", err);
  }
}

// ================================
// üîπ T·∫†O & CH·ªåN B√ÄN
// ================================

// T·∫°o b√†n m·ªõi ho·∫∑c ƒë∆°n mang ƒëi
function taoBanMoi(name, type = "mangdi") {
  const don = {
    id: Date.now(),
    name: name,
    type: type,
    cart: [],
    served: false,
    createdAt: Date.now(),
    _isDraft: true
  };

  TABLES.push(don);
  currentTable = don;
  saveAll();
  return don;
}

// M·ªü l·∫°i b√†n ƒë√£ t·ªìn t·∫°i
function moBan(id) {
  const ban = TABLES.find((t) => t.id === id);
  if (ban) currentTable = ban;
  return ban;
}

// ƒê√≥ng b√†n hi·ªán t·∫°i (sau khi thanh to√°n ho·∫∑c h·ªßy)
function dongBanHienTai() {
  if (!currentTable) return;
  TABLES = TABLES.filter((t) => t.id !== currentTable.id);
  currentTable = null;
  saveAll();
}

// ================================
// üîπ TR·∫†NG TH√ÅI & ƒê·ªíNG B·ªò
// ================================

// C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n
function capNhatTrangThai(id, status) {
  const ban = TABLES.find((t) => t.id === id);
  if (ban) {
    ban.status = status;
    saveAll();
  }
}

// Reset to√†n b·ªô b√†n trong ng√†y m·ªõi
function resetBanHangNgay() {
  TABLES = [];
  currentTable = null;
  localStorage.removeItem("BT_TABLES");
  db.collection("TABLES").get().then((snap) => {
    snap.forEach((doc) => doc.ref.delete());
  });
}

// ================================
// üîπ TI·ªÜN √çCH
// ================================

// T√≠nh t·ªïng ti·ªÅn b√†n hi·ªán t·∫°i
function tongTienBan(ban) {
  if (!ban || !ban.cart) return 0;
  return ban.cart.reduce((a, m) => a + m.price * (m.soluong || 0), 0);
}

// C·∫≠p nh·∫≠t gi·ªè h√†ng hi·ªán t·∫°i v√† l∆∞u
function capNhatBanHienTai() {
  if (!currentTable) return;
  saveAll();
}
